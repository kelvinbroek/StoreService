//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WinClient.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProductDTO", Namespace="http://schemas.datacontract.org/2004/07/myService")]
    [System.SerializableAttribute()]
    public partial class ProductDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private double PriceField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int StockField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Stock {
            get {
                return this.StockField;
            }
            set {
                if ((this.StockField.Equals(value) != true)) {
                    this.StockField = value;
                    this.RaisePropertyChanged("Stock");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IStoreService")]
    public interface IStoreService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/LoginUser", ReplyAction="http://tempuri.org/IStoreService/LoginUserResponse")]
        bool LoginUser(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/LoginUser", ReplyAction="http://tempuri.org/IStoreService/LoginUserResponse")]
        System.Threading.Tasks.Task<bool> LoginUserAsync(string username, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/InsertCustomer", ReplyAction="http://tempuri.org/IStoreService/InsertCustomerResponse")]
        string InsertCustomer(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/InsertCustomer", ReplyAction="http://tempuri.org/IStoreService/InsertCustomerResponse")]
        System.Threading.Tasks.Task<string> InsertCustomerAsync(string value);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetAllProducts", ReplyAction="http://tempuri.org/IStoreService/GetAllProductsResponse")]
        WinClient.ServiceReference.ProductDTO[] GetAllProducts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetAllProducts", ReplyAction="http://tempuri.org/IStoreService/GetAllProductsResponse")]
        System.Threading.Tasks.Task<WinClient.ServiceReference.ProductDTO[]> GetAllProductsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/BuyProduct", ReplyAction="http://tempuri.org/IStoreService/BuyProductResponse")]
        bool BuyProduct(int aantal, string product, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/BuyProduct", ReplyAction="http://tempuri.org/IStoreService/BuyProductResponse")]
        System.Threading.Tasks.Task<bool> BuyProductAsync(int aantal, string product, string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetMyInventory", ReplyAction="http://tempuri.org/IStoreService/GetMyInventoryResponse")]
        WinClient.ServiceReference.ProductDTO[] GetMyInventory(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetMyInventory", ReplyAction="http://tempuri.org/IStoreService/GetMyInventoryResponse")]
        System.Threading.Tasks.Task<WinClient.ServiceReference.ProductDTO[]> GetMyInventoryAsync(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetSaldo", ReplyAction="http://tempuri.org/IStoreService/GetSaldoResponse")]
        double GetSaldo(string username);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IStoreService/GetSaldo", ReplyAction="http://tempuri.org/IStoreService/GetSaldoResponse")]
        System.Threading.Tasks.Task<double> GetSaldoAsync(string username);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IStoreServiceChannel : WinClient.ServiceReference.IStoreService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StoreServiceClient : System.ServiceModel.ClientBase<WinClient.ServiceReference.IStoreService>, WinClient.ServiceReference.IStoreService {
        
        public StoreServiceClient() {
        }
        
        public StoreServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public StoreServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StoreServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public StoreServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool LoginUser(string username, string password) {
            return base.Channel.LoginUser(username, password);
        }
        
        public System.Threading.Tasks.Task<bool> LoginUserAsync(string username, string password) {
            return base.Channel.LoginUserAsync(username, password);
        }
        
        public string InsertCustomer(string value) {
            return base.Channel.InsertCustomer(value);
        }
        
        public System.Threading.Tasks.Task<string> InsertCustomerAsync(string value) {
            return base.Channel.InsertCustomerAsync(value);
        }
        
        public WinClient.ServiceReference.ProductDTO[] GetAllProducts() {
            return base.Channel.GetAllProducts();
        }
        
        public System.Threading.Tasks.Task<WinClient.ServiceReference.ProductDTO[]> GetAllProductsAsync() {
            return base.Channel.GetAllProductsAsync();
        }
        
        public bool BuyProduct(int aantal, string product, string username) {
            return base.Channel.BuyProduct(aantal, product, username);
        }
        
        public System.Threading.Tasks.Task<bool> BuyProductAsync(int aantal, string product, string username) {
            return base.Channel.BuyProductAsync(aantal, product, username);
        }
        
        public WinClient.ServiceReference.ProductDTO[] GetMyInventory(string username) {
            return base.Channel.GetMyInventory(username);
        }
        
        public System.Threading.Tasks.Task<WinClient.ServiceReference.ProductDTO[]> GetMyInventoryAsync(string username) {
            return base.Channel.GetMyInventoryAsync(username);
        }
        
        public double GetSaldo(string username) {
            return base.Channel.GetSaldo(username);
        }
        
        public System.Threading.Tasks.Task<double> GetSaldoAsync(string username) {
            return base.Channel.GetSaldoAsync(username);
        }
    }
}
